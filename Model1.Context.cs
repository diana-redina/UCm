//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace UCm
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Used_CarsEntities : DbContext
    {
        public Used_CarsEntities()
            : base("name=Used_CarsEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Access_Rights> Access_Rights { get; set; }
        public virtual DbSet<Cars> Cars { get; set; }
        public virtual DbSet<Customers> Customers { get; set; }
        public virtual DbSet<Orders> Orders { get; set; }
        public virtual DbSet<Previous_Owner> Previous_Owner { get; set; }
        public virtual DbSet<Specifications> Specifications { get; set; }
        public virtual DbSet<Stamps> Stamps { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
        public virtual DbSet<Users> Users { get; set; }
    
        public virtual ObjectResult<for_option_Result> for_option(string stampnum, string model, string year, string colour, string body, string poisk)
        {
            var stampnumParameter = stampnum != null ?
                new ObjectParameter("stampnum", stampnum) :
                new ObjectParameter("stampnum", typeof(string));
    
            var modelParameter = model != null ?
                new ObjectParameter("model", model) :
                new ObjectParameter("model", typeof(string));
    
            var yearParameter = year != null ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(string));
    
            var colourParameter = colour != null ?
                new ObjectParameter("colour", colour) :
                new ObjectParameter("colour", typeof(string));
    
            var bodyParameter = body != null ?
                new ObjectParameter("body", body) :
                new ObjectParameter("body", typeof(string));
    
            var poiskParameter = poisk != null ?
                new ObjectParameter("poisk", poisk) :
                new ObjectParameter("poisk", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<for_option_Result>("for_option", stampnumParameter, modelParameter, yearParameter, colourParameter, bodyParameter, poiskParameter);
        }
    
        public virtual ObjectResult<for_persona_Result> for_persona()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<for_persona_Result>("for_persona");
        }
    
        public virtual ObjectResult<checkLoginPassword_Result> checkLoginPassword(string login, string password)
        {
            var loginParameter = login != null ?
                new ObjectParameter("login", login) :
                new ObjectParameter("login", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<checkLoginPassword_Result>("checkLoginPassword", loginParameter, passwordParameter);
        }
    }
}
